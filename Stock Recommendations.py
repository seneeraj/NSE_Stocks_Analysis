# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvUYmArfpXuJ-hwAb4gWlwVBj3midjuj
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pytz
import warnings

warnings.filterwarnings("ignore")

# Function to calculate technical indicators
def calculate_indicators(df):
    df['SMA20'] = df['Price'].rolling(window=20).mean()
    df['EMA20'] = df['Price'].ewm(span=20, adjust=False).mean()

    delta = df['Price'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))

    df['EMA12'] = df['Price'].ewm(span=12, adjust=False).mean()
    df['EMA26'] = df['Price'].ewm(span=26, adjust=False).mean()
    df['MACD'] = df['EMA12'] - df['EMA26']
    df['Signal_Line'] = df['MACD'].ewm(span=9, adjust=False).mean()

    df['Recommendation'] = df.apply(get_recommendation, axis=1)

    return df

# Function to generate buy/sell/hold signals
def get_recommendation(row):
    signals = ["Buy" if row['RSI'] < 30 or row['MACD'] > row['Signal_Line'] else
               "Sell" if row['RSI'] > 70 or row['MACD'] < row['Signal_Line'] else "Hold"]
    return signals[0]

# Streamlit UI setup
st.title("📊 Intraday Stock Analysis Tool (NSE)")

symbol = st.text_input("Enter NSE stock symbol (e.g., RELIANCE)", "").upper()
interval = st.selectbox("Select Interval", ["1m", "5m", "15m", "1h", "1d"])
period = st.selectbox("Select Period", ["1d", "5d", "1mo", "3mo"])

if symbol:
    ticker = symbol + ".NS" if not symbol.endswith(".NS") else symbol

    st.write(f"Fetching data for **{ticker}**...")

    try:
        df = yf.download(tickers=ticker, interval=interval, period=period, progress=False)
        df.index = df.index.tz_convert('Asia/Kolkata').tz_localize(None)

        df = df[['Close', 'Volume']]
        df.columns = ['Price', 'Volume']
        df = calculate_indicators(df)

        st.write("### 📌 Latest Data Preview")
        st.dataframe(df.tail())

        # Download button for CSV
        st.download_button("Download Data as CSV", df.to_csv(index=True), file_name="stock_data.csv", mime="text/csv")

    except Exception as e:
        st.error(f"⚠️ Error: {e}")